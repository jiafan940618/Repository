<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:p="http://www.springframework.org/schema/p" xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:tx="http://www.springframework.org/schema/tx" xmlns:jdbc="http://www.springframework.org/schema/jdbc"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
	http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
	http://www.springframework.org/schema/context
	http://www.springframework.org/schema/context/spring-context-4.0.xsd
	http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.0.xsd
	http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc-4.0.xsd 
	http://www.springframework.org/schema/mvc  
      http://www.springframework.org/schema/mvc/spring-mvc.xsd">
      
      <!-- 启动注解驱动的Spring MVC功能，注册请求url和注解POJO类方法的映射 <mvc:annotation-driven/> -->
	<mvc:annotation-driven>
		<mvc:message-converters register-defaults="true">
			<bean
				class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter">
				<property name="objectMapper">
					<bean class="com.fasterxml.jackson.databind.ObjectMapper">
						<property name="serializationInclusion">
							<value type="com.fasterxml.jackson.annotation.JsonInclude.Include">NON_NULL</value>
						</property>
					</bean>
				</property>
			</bean>
		</mvc:message-converters>
	</mvc:annotation-driven>
      
	<!-- 启动包扫描功能，以便注册带有@Controller、@Service、@repository、@Component等注解的类成为spring的bean -->
	<context:component-scan base-package="com.hy.gf" />
	<!-- 启动注解驱动的Spring MVC功能，注册请求url和注解POJO类方法的映射 -->
	<mvc:annotation-driven />

	<!-- 静态资源访问，自动解析 -->
	<mvc:default-servlet-handler />
	
    <mvc:resources location="/" mapping="/**" />
    <mvc:resources location="/static/" mapping="/static/**" />
	<mvc:resources location="/resources/" mapping="/resources/**" />
	
	<!-- 线程 -->

	<!-- 对模型视图名称的解析，在请求时模型视图名称添加前后缀 <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver" 
		p:prefix="/" /> <bean id="exceptionResolver" class="com.hy.cbs.controller.ExceptionHandler"/> -->
	<!-- 引入jdbc配置文件 -->
	<context:property-placeholder location="classpath:jdbc.properties" />

<!-- 数据源配置, 使用 alibaba.druid 数据库连接池 -->
	<bean id="dataSourceLocal" class="com.alibaba.druid.pool.DruidDataSource"
		init-method="init" destroy-method="close" autowire="byName">
		<!-- 数据源驱动类可不写，Druid默认会自动根据URL识别DriverClass -->
		<!-- 基本属性 url、user、password -->
		<property name="driverClassName" value="${jdbc.driverClassName}" />
		<property name="url" value="${jdbc.url}" />
		<property name="username" value="${jdbc.username}" />
		<property name="password" value="${jdbc.password}" />
		<!-- 配置初始化大小、最小、最大 -->
		<property name="initialSize" value="3" />
		<property name="minIdle" value="3" />
		<property name="maxActive" value="20" />
		<!-- 配置获取连接等待超时的时间 -->
		<property name="maxWait" value="60000" />
		<!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
		<property name="timeBetweenEvictionRunsMillis" value="60000" />
		<!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
		<property name="minEvictableIdleTimeMillis" value="300000" />
		<property name="validationQuery" value="SELECT 'x'" />
		<property name="testWhileIdle" value="true" />
		<property name="testOnBorrow" value="false" />
		<property name="testOnReturn" value="false" />
		<!-- 打开PSCache，并且指定每个连接上PSCache的大小（Oracle使用） <property name="poolPreparedStatements" 
			value="true" /> <property name="maxPoolPreparedStatementPerConnectionSize" 
			value="20" /> -->
		<!-- 配置监控统计拦截的filters -->
		<property name="filters" value="stat" />
	</bean>
	
	<!-- SpringMVC上传文件时，需要配置MultipartResolver处理器 -->
	<bean id="multipartResolver"
		class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
		<property name="defaultEncoding" value="UTF-8" />
		<!-- 指定所上传文件的总大小,单位字节。注意maxUploadSize属性的限制不是针对单个文件，而是所有文件的容量之和 -->
		<property name="maxUploadSize" value="-1" />
	</bean>



	<bean id="viewResolver"
		class="org.springframework.web.servlet.view.InternalResourceViewResolver">
	</bean>

	<!-- Session工厂 -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSourceLocal" />
		<property name="typeAliasesPackage" value="com.hy.gf.model" />
		<!-- mybatis配置文件 -->
		<property name="mapperLocations" value="classpath:/mybatis/*Mapper.xml" />
		<!-- <property name="configLocation" value="classpath:mybatis-config.xml" 
			/> -->
	</bean>


	<bean id="beanHelper" class="com.hy.gf.util.BeanHelper" />
	
	<!-- 缓存 <bean id="ehCacheManager" class="org.springframework.cache.ehcache.EhCacheManagerFactoryBean"> 
		<property name="configLocation" value="classpath:ehcache.xml" /> </bean> -->

	<!-- 扫描basePackage下所有以@MyBatisRepository标识的 接口 -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="com.hy.gf.mapper" />
		<property name="annotationClass" value="org.springframework.stereotype.Component" />
	</bean>

	<bean id="transactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSourceLocal" />
	</bean>
	<!-- 数据配置 <bean id="dataSourceLocal" name="dataSource" class="org.apache.commons.dbcp.BasicDataSource" 
		destroy-method="close"> <property name="driverClassName" value="com.mysql.jdbc.Driver" 
		/> <property name="url" value="jdbc:mysql://rdsqcwd4ou59mi06977xpublic.mysql.rds.aliyuncs.com:3306/shop?useUnicode=true&amp;characterEncoding=utf-8" 
		/> <property name="username" value="xiongxin" /> <property name="password" 
		value="123456" /> </bean> -->
		
		<!--配置拦截器, 多个拦截器,顺序执行 -->
    <mvc:interceptors>
        <mvc:interceptor>
            <mvc:mapping path="/**" />
            <bean class="com.hy.gf.interceptor.PageIR"/>
        </mvc:interceptor>
    </mvc:interceptors>
</beans>